<project>
    <shortName>bettertomorrow</shortName>
    <fullName>Better Tomorrow</fullName>
    <version>1.20.0</version>
    <installerFilename>${product_shortname}-${product_version}-${build_number}-${compose_name}-${platform_name}-installer.${platform_exec_suffix}</installerFilename>
    <leftImage>${env(WORKSPACE)}/Installation/InstallBuilder/images/icon.PNG</leftImage>
    <logoImage>${env(WORKSPACE)}/Installation/InstallBuilder/images/VerintLogo.png</logoImage>
    <splashImage>${env(WORKSPACE)}/Installation/InstallBuilder/images/VerintLogo.png</splashImage>
    <componentList>
        <component>
            <name>scripts</name>
            <description>Scripts</description>
            <canBeEdited>0</canBeEdited>
            <selected>1</selected>
            <show>0</show>
            <folderList>
                <folder>
                    <description>Program Files</description>
                    <destination>${installdir}</destination>
                    <name>programfiles</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>${env(WORKSPACE)}/${project.version}/InstallBuilder/scripts/airgap</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>${env(WORKSPACE)}/${project.version}/InstallBuilder/scripts/dockstation_injector.py</origin>
                        </distributionFile>
                        <distributionFile>
                            <origin>${env(WORKSPACE)}/${project.version}/InstallBuilder/scripts/optparse.bash</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
            </folderList>
            <readyToInstallActionList>
                <throwError text="Please install Docker first and then run the installer">
                    <ruleList>
                        <programTest condition="is_not_in_path" name="docker"/>
                    </ruleList>
                </throwError>
                <throwError text="Please install Docker-Compose first and then run the installer">
                    <ruleList>
                        <programTest condition="is_not_in_path" name="docker-compose"/>
                    </ruleList>
                </throwError>
                <throwError>
                    <customErrorMessage>User ${username} does not exist, please use a username that exists on the system.</customErrorMessage>
                    <text>Error: User does not exist.</text>
                    <ruleList>
                        <userTest>
                            <logic>not_exists</logic>
                            <username>${username}</username>
                        </userTest>
                    </ruleList>
                </throwError>
                <throwError>
                    <customErrorMessage>Using root as the target user is prohibited.</customErrorMessage>
                    <text>Error: Cannot use root as target user</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${username}</text>
                            <value>root</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </readyToInstallActionList>
            <startMenuShortcutList>
                <startMenuShortcut>
                    <comment>Uninstall ${product_fullname}</comment>
                    <name>Uninstall ${product_fullname}</name>
                    <runAsAdmin>0</runAsAdmin>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}/${uninstallerName}.exe</windowsExec>
                    <windowsExecArgs></windowsExecArgs>
                    <windowsIcon></windowsIcon>
                    <windowsPath>${installdir}/</windowsPath>
                </startMenuShortcut>
            </startMenuShortcutList>
        </component>
        <component>
            <name>main</name>
            <description>Main Program</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <folder>
                    <description>Main Images</description>
                    <destination>${installdir}/main</destination>
                    <name>main_images</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <origin>${env(WORKSPACE)}/docker_${product_version}-${product_type}/images</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
                <folder>
                    <description>Docker Compose</description>
                    <destination>/home/${username}/docker-compose/${product_version}</destination>
                    <name>dockercompose</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionDirectory>
                            <allowWildcards>1</allowWildcards>
                            <origin>${env(WORKSPACE)}/docker_${product_version}-${product_type}/compose/*</origin>
                        </distributionDirectory>
                    </distributionFileList>
                </folder>
            </folderList>
            <postInstallationActionList>
                <showProgressDialog>
                    <title>Finalizing Installation</title>
                    <width>400</width>
                    <actionList>
                        <runProgram>
                            <program>${installdir}/airgap</program>
                            <programArguments>load ${installdir}/main/images</programArguments>
                            <progressText>Importing Docker Images, please wait...</progressText>
                            <useMSDOSPath>0</useMSDOSPath>
                        </runProgram>
                    </actionList>
                </showProgressDialog>
                <setInstallerVariableFromScriptOutput>
                    <exec>docker-compose</exec>
                    <execArgs>-f docker-compose.yml run --rm backend --task license-ver -o</execArgs>
                    <name>hw_fingerprint</name>
                    <workingDirectory>/home/${username}/docker-compose/${product_version}</workingDirectory>
                </setInstallerVariableFromScriptOutput>
                <runProgram>
                    <program>echo</program>
                    <programArguments>"${hw_fingerprint}" &gt; /home/${username}/hw_fingerprint.txt</programArguments>
                </runProgram>
            </postInstallationActionList>
            <readyToInstallActionList>
                <throwError text="Please install Docker first and then run the installer">
                    <ruleList>
                        <programTest condition="is_not_in_path" name="docker"/>
                    </ruleList>
                </throwError>
                <throwError text="Please install Docker-Compose first and then run the installer">
                    <ruleList>
                        <programTest condition="is_not_in_path" name="docker-compose"/>
                    </ruleList>
                </throwError>
                <throwError>
                    <customErrorMessage>User ${username} does not exist, please use a username that exists on the system.</customErrorMessage>
                    <text>Error: User does not exist.</text>
                    <ruleList>
                        <userTest>
                            <logic>not_exists</logic>
                            <username>${username}</username>
                        </userTest>
                    </ruleList>
                </throwError>
                <throwError>
                    <customErrorMessage>Using root as the target user is prohibited.</customErrorMessage>
                    <text>Error: Cannot use root as target user</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${username}</text>
                            <value>root</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </readyToInstallActionList>
            <startMenuShortcutList>
                <startMenuShortcut>
                    <comment>Uninstall ${product_fullname}</comment>
                    <name>Uninstall ${product_fullname}</name>
                    <runAsAdmin>0</runAsAdmin>
                    <runInTerminal>0</runInTerminal>
                    <windowsExec>${installdir}/${uninstallerName}.exe</windowsExec>
                    <windowsExecArgs></windowsExecArgs>
                    <windowsIcon></windowsIcon>
                    <windowsPath>${installdir}/</windowsPath>
                </startMenuShortcut>
            </startMenuShortcutList>
        </component>
        <component>
            <name>dashboard</name>
            <description>Dashboard Client</description>
            <canBeEdited>1</canBeEdited>
            <selected>1</selected>
            <show>1</show>
            <folderList>
                <folder>
                    <description>/usr/local/bin</description>
                    <destination>/usr/local/bin</destination>
                    <name>localbin</name>
                    <platforms>all</platforms>
                    <distributionFileList>
                        <distributionFile>
                            <origin>${env(WORKSPACE)}/${project.vendor}-${product_version}-linux-x86_64.AppImage</origin>
                        </distributionFile>
                    </distributionFileList>
                </folder>
            </folderList>
            <postInstallationActionList>
                <runProgram>
                    <program>chmod</program>
                    <programArguments>+x /usr/local/bin/*.AppImage</programArguments>
                </runProgram>
            </postInstallationActionList>
        </component>
    </componentList>
    <initializationActionList>
        <actionGroup>
            <actionList>
                <throwError text="Please launch the installer as root">
                    <ruleEvaluationLogic>or</ruleEvaluationLogic>
                    <ruleList>
                        <programTest condition="is_not_in_path" name="pkexec"/>
                        <compareText>
                            <logic>equals</logic>
                            <text>${linux_distribution}</text>
                            <value>redhat</value>
                        </compareText>
                    </ruleList>
                </throwError>
                <runProgram program="pkexec">
                    <programArguments>env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY "${installer_pathname}" &amp;</programArguments>
                </runProgram>
                <exit exitCode="${program_exit_code}"/>
            </actionList>
            <ruleList>
                <isFalse>
                    <value>${installer_is_root_install}</value>
                </isFalse>
            </ruleList>
        </actionGroup>
    </initializationActionList>
    <allowComponentSelection>1</allowComponentSelection>
    <createUninstaller>0</createUninstaller>
    <defaultUnixDirectoryPermissions></defaultUnixDirectoryPermissions>
    <defaultUnixFilePermissions></defaultUnixFilePermissions>
    <enableRollback>1</enableRollback>
    <enableSslSupport>1</enableSslSupport>
    <enableTimestamp>1</enableTimestamp>
    <overrideGtkButtonText>1</overrideGtkButtonText>
    <vendor>AnyVision</vendor>
    <finalPageActionList>
        <runProgram>
            <program>chown</program>
            <programArguments>-R ${username}:${username} /home/${username}/docker-compose</programArguments>
            <show>0</show>
        </runProgram>
        <actionGroup progressText="Add compose to Dockstation">
            <show>0</show>
            <actionList>
                <runProgram>
                    <program>mkdir</program>
                    <programArguments>-p /home/${username}/.config/dockstation</programArguments>
                </runProgram>
                <if>
                    <actionList>
                        <runProgram>
                            <program>python</program>
                            <programArguments>${installdir}/dockstation_injector.py -f "/home/${username}/docker-compose/${product_version}" -t "${product_version}" -n "${sanitized_version}" -e "/home/${username}/.config/dockstation/Settings"</programArguments>
                        </runProgram>
                    </actionList>
                    <conditionRuleList>
                        <programTest>
                            <condition>is_in_path</condition>
                            <name>python</name>
                        </programTest>
                    </conditionRuleList>
                    <elseActionList>
                        <setInstallerVariableFromRegEx>
                            <name>sanitized_version</name>
                            <pattern>^(\d)\.(\d{1,2})\.(\d{1,2})</pattern>
                            <substitution>\1\2\3</substitution>
                            <text>${product_version}</text>
                        </setInstallerVariableFromRegEx>
                        <runProgram>
                            <program>python3</program>
                            <programArguments>${installdir}/dockstation_injector.py -f "/home/${username}/docker-compose/${product_version}" -t "${product_version}" -n "${sanitized_version}" -e "/home/${username}/.config/dockstation/Settings"</programArguments>
                        </runProgram>
                    </elseActionList>
                </if>
                <runProgram>
                    <program>chown</program>
                    <programArguments>-R ${username}:${username} /home/${username}/.config/dockstation</programArguments>
                </runProgram>
            </actionList>
            <ruleList>
                <fileExists>
                    <path>/usr/local/bin/dockstation-1.4.1-x86_64.AppImage</path>
                </fileExists>
            </ruleList>
        </actionGroup>
        <runProgram>
            <program>docker-compose</program>
            <programArguments>-f docker-compose.yml -p ${product_version} up -d</programArguments>
            <progressText>Start the main stack</progressText>
            <useMSDOSPath>0</useMSDOSPath>
            <workingDirectory>/home/${username}/docker-compose/${product_version}</workingDirectory>
            <ruleList>
                <componentTest>
                    <logic>exists</logic>
                    <name>main</name>
                </componentTest>
                <fileExists>
                    <path>/home/${username}/docker-compose/${product_version}/docker-compose.yml</path>
                </fileExists>
            </ruleList>
        </runProgram>
        <deleteFile>
            <path>${installdir}</path>
            <progressText>Remove temporary Docker images</progressText>
            <show>0</show>
        </deleteFile>
        <runProgram>
            <program>${project.vendor}-${product_version}-linux-x86_64.AppImage</program>
            <programArguments></programArguments>
            <progressText>Run the Dashboard application</progressText>
            <useMSDOSPath>0</useMSDOSPath>
            <workingDirectory>/usr/local/bin</workingDirectory>
            <ruleList>
                <componentTest>
                    <logic>exists</logic>
                    <name>dashboard</name>
                </componentTest>
                <fileExists>
                    <path>/usr/local/bin/${project.vendor}-${product_version}-linux-x86_64.AppImage</path>
                </fileExists>
            </ruleList>
        </runProgram>
    </finalPageActionList>
    <parameterList>
        <directoryParameter>
            <name>installdir</name>
            <description>Installer.Parameter.installdir.description</description>
            <explanation>Installer.Parameter.installdir.explanation</explanation>
            <value></value>
            <default>${platform_install_prefix}/${product_shortname}-${product_version}</default>
            <allowEmptyValue>0</allowEmptyValue>
            <cliOptionName>prefix</cliOptionName>
            <insertAfter>welcome</insertAfter>
            <mustBeWritable>1</mustBeWritable>
            <mustExist>0</mustExist>
            <width>30</width>
        </directoryParameter>
        <parameterGroup>
            <name>extra_config</name>
            <title>Configuration</title>
            <explanation></explanation>
            <value></value>
            <default></default>
            <insertAfter>installdir</insertAfter>
            <parameterList>
                <stringParameter>
                    <name>username</name>
                    <description>Username</description>
                    <explanation>Please enter the system username to install the compose files to.</explanation>
                    <value></value>
                    <default>user</default>
                    <allowEmptyValue>0</allowEmptyValue>
                    <cliOptionName>username</cliOptionName>
                    <width>30</width>
                </stringParameter>
            </parameterList>
            <validationActionList>
                <throwError>
                    <customErrorMessage>User ${username} does not exist, please use a username that exists on the system.</customErrorMessage>
                    <text>Error: User does not exist.</text>
                    <ruleList>
                        <userTest>
                            <logic>not_exists</logic>
                            <username>${username}</username>
                        </userTest>
                    </ruleList>
                </throwError>
                <throwError>
                    <customErrorMessage>Using root as the target user is prohibited.</customErrorMessage>
                    <text>Error: Cannot use root as target user</text>
                    <ruleList>
                        <compareText>
                            <logic>equals</logic>
                            <text>${username}</text>
                            <value>root</value>
                        </compareText>
                    </ruleList>
                </throwError>
            </validationActionList>
        </parameterGroup>
        <parameterGroup>
            <name>hw_fingerprint_page</name>
            <title>Hardware Fingerprint</title>
            <explanation></explanation>
            <value></value>
            <default></default>
            <insertAfter>installation</insertAfter>
            <parameterList>
                <infoParameter>
                    <name>hwinfo</name>
                    <description></description>
                    <explanation>Please copy the fingerprint below and send it to the vendor in order to generate a license for this machine:</explanation>
                    <value>${hw_fingerprint}</value>
                    <default></default>
                    <trimMarginNumChars>0</trimMarginNumChars>
                </infoParameter>
            </parameterList>
        </parameterGroup>
    </parameterList>
    <platformOptionsList>
        <platformOptions>
            <platform>linux-x64</platform>
        </platformOptions>
    </platformOptionsList>
</project>

